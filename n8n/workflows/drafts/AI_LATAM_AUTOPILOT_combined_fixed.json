{
  "name": "AI LATAM — Autopilot (combined fixed)",
  "nodes": [
    {
      "parameters": { "rule": { "interval": [ { "field": "hours" } ] } },
      "id": "trg-startups",
      "name": "STARTUPS — AUTOPILOT (hourly)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [ -2380, -360 ]
    },
    {
      "parameters": { "rule": { "interval": [ { "field": "hours" } ] } },
      "id": "trg-aires",
      "name": "AI RESEARCH — AUTOPILOT (hourly)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [ -2380, 160 ]
    },
    {
      "parameters": { "rule": { "interval": [ { "field": "hours" } ] } },
      "id": "trg-global",
      "name": "GLOBAL DISCOVERY — AUTOPILOT (hourly)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [ -2380, 660 ]
    },

    {
      "parameters": {
        "jsCode": "const date = new Date().toISOString().slice(0,10);\nreturn [{ json: { params: { category:'startups', timeWindowHours:48, languages:['es','pt','en'], minItems:3, feedMaxLatest:150, repoOwner:'vulcanoai', repoName:'vulcanoai.github.io', branch:'main', pathLatest:'data/startups/feed-latest.json', pathSnapshot:`data/startups/feed-${date}.json` } } }];"
      },
      "id": "st-build-params",
      "name": "STARTUPS — BUILD_PARAMS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -2140, -360 ]
    },
    { "parameters": { "url": "https://contxto.com/feed/", "responseFormat": "string" }, "id": "st-http-contxto", "name": "STARTUPS — HTTP Contxto", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -2140, -520 ] },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function t(v){return String(v||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}const out=[];const re=/<item[\\s\\S]*?<\\/item>/gi;let m;while((m=re.exec(xml))){const it=m[0];const title=t((it.match(/<title>([\\s\\S]*?)<\\/title>/i)||[])[1]);const link=t((it.match(/<link>([\\s\\S]*?)<\\/link>/i)||[])[1]);const desc=t((it.match(/<description>([\\s\\S]*?)<\\/description>/i)||[])[1]);const date=t((it.match(/<pubDate>([\\s\\S]*?)<\\/pubDate>/i)||[])[1]||(it.match(/<updated>([\\s\\S]*?)<\\/updated>/i)||[])[1]);if(!title||!link) continue;out.push({id:link||title,title,summary:desc,url:link,source:'Contxto',source_url:'https://contxto.com',country:'Regional',topics:['Startups','Inversión'],language:'es',published_at:new Date(date||Date.now()).toISOString(),relevance:5,sentiment:'neutral',author:'',curator:'Luciano AI'});}return [{ json:{ articles: out } }];" }, "id": "st-parse-contxto", "name": "STARTUPS — PARSE Contxto", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1920, -520 ] },
    { "parameters": { "url": "https://startupi.com.br/feed/", "responseFormat": "string" }, "id": "st-http-startupi", "name": "STARTUPS — HTTP Startupi", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -2140, -420 ] },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function t(v){return String(v||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}const out=[];const re=/<item[\\s\\S]*?<\\/item>/gi;let m;while((m=re.exec(xml))){const it=m[0];const title=t((it.match(/<title>([\\s\\S]*?)<\\/title>/i)||[])[1]);const link=t((it.match(/<link>([\\s\\S]*?)<\\/link>/i)||[])[1]);const desc=t((it.match(/<description>([\\s\\S]*?)<\\/description>/i)||[])[1]);const date=t((it.match(/<pubDate>([\\s\\S]*?)<\\/pubDate>/i)||[])[1]||(it.match(/<updated>([\\s\\S]*?)<\\/updated>/i)||[])[1]);if(!title||!link) continue;out.push({id:link||title,title,summary:desc,url:link,source:'Startupi',source_url:'https://startupi.com.br',country:'Brasil',topics:['Startups','Empresas'],language:'pt',published_at:new Date(date||Date.now()).toISOString(),relevance:5,sentiment:'neutral',author:'',curator:'Luciano AI'});}return [{ json:{ articles: out } }];" }, "id": "st-parse-startupi", "name": "STARTUPS — PARSE Startupi", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1920, -420 ] },
    { "parameters": { "url": "https://startups.com.br/feed/", "responseFormat": "string" }, "id": "st-http-startupsbr", "name": "STARTUPS — HTTP StartupsBR", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -2140, -320 ] },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function t(v){return String(v||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}const out=[];const re=/<item[\\s\\S]*?<\\/item>/gi;let m;while((m=re.exec(xml))){const it=m[0];const title=t((it.match(/<title>([\\s\\S]*?)<\\/title>/i)||[])[1]);const link=t((it.match(/<link>([\\s\\S]*?)<\\/link>/i)||[])[1]);const desc=t((it.match(/<description>([\\s\\S]*?)<\\/description>/i)||[])[1]);const date=t((it.match(/<pubDate>([\\s\\S]*?)<\\/pubDate>/i)||[])[1]||(it.match(/<updated>([\\s\\S]*?)<\\/updated>/i)||[])[1]);if(!title||!link) continue;out.push({id:link||title,title,summary:desc,url:link,source:'Startups.com.br',source_url:'https://startups.com.br',country:'Brasil',topics:['Startups','VC'],language:'pt',published_at:new Date(date||Date.now()).toISOString(),relevance:5,sentiment:'neutral',author:'',curator:'Luciano AI'});}return [{ json:{ articles: out } }];" }, "id": "st-parse-startupsbr", "name": "STARTUPS — PARSE StartupsBR", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1920, -320 ] },
    {
      "parameters": {
        "jsCode": "function p(){ try{ return $items('STARTUPS — BUILD_PARAMS',0,0).json.params; }catch{ return {}; } }\nconst params=p(); const hours=Number(params.timeWindowHours||48); const now=Date.now();\nconst arr=[]; for(const it of $input.all()){ const a=Array.isArray(it.json.articles)? it.json.articles: []; for(const x of a){ if(x && x.url) arr.push(x); } }\nconst seen=new Set(); const out=[]; for(const a of arr){ const k=a.url; if(!k||seen.has(k)) continue; seen.add(k); out.push(a); }\nconst filtered=out.filter(a=>{ const t=new Date(a.published_at).getTime(); return isFinite(t) && (now-t)<=hours*3600*1000; });\nfiltered.sort((a,b)=> new Date(b.published_at)-new Date(a.published_at));\nreturn [{ json:{ category:'startups', articles: filtered } }];"
      },
      "id": "st-aggregate",
      "name": "STARTUPS — AGGREGATE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1700, -420 ]
    },
    {
      "parameters": {
        "jsCode": "function item(n){ try{ const it=$items(n,0,0); return it && it.json ? it.json : null; }catch(_){ return null; } }\nconst params = (item('STARTUPS — BUILD_PARAMS')?.params) || {};\nconst owner = params.repoOwner || 'vulcanoai';\nconst repo  = params.repoName  || 'vulcanoai.github.io';\nconst branch= params.branch     || 'main';\nconst base  = `https://api.github.com/repos/${owner}/${repo}/contents`;\nconst latestPath = params.pathLatest || 'data/startups/feed-latest.json';\nconst snapshotPath = params.pathSnapshot || ('data/startups/feed-'+new Date().toISOString().slice(0,10)+'.json');\nconst input = item('STARTUPS — AGGREGATE') || $json || {};\nconst articles = Array.isArray(input.articles) ? input.articles : [];\nconst latestPayload = JSON.stringify({ version:'v1.0', category:'startups', generated_at: new Date().toISOString(), articles }, null, 2);\nconst latestContent = Buffer.from(latestPayload).toString('base64');\nreturn [ { json: { target:'latest', base, branch, path: latestPath, content: latestContent, message: 'chore(startups): update feed-latest.json' } }, { json: { target:'snapshot', base, branch, path: snapshotPath, content: latestContent, message: 'chore(startups): snapshot for day' } } ];"
      },
      "id": "st-build-gh",
      "name": "STARTUPS — BUILD_GH_BODY",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1500, -420 ]
    },
    { "parameters": { "url": "={{$json.base}}/{{ $json.path }}?ref={{$json.branch}}", "authentication": "predefinedCredentialType", "nodeCredentialType": "githubApi", "sendHeaders": true, "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" } ] } }, "id": "st-gh-get", "name": "STARTUPS — GITHUB_GET_SHA", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -1320, -500 ], "alwaysOutputData": true, "continueOnFail": true, "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } } },
    { "parameters": { "mode": "mergeByPosition", "options": {} }, "id": "st-merge-sha", "name": "STARTUPS — MERGE_SHA", "type": "n8n-nodes-base.merge", "typeVersion": 2, "position": [ -1160, -460 ] },
    { "parameters": { "jsCode": "const j=$json||{}; const base=j.base||''; const path=j.path||''; const branch=j.branch||'main'; const message=j.message||'chore(startups): update'; const content=j.content; let sha; if(j && j.body && typeof j.body.sha==='string') sha=j.body.sha; if(!sha && j && j.data && typeof j.data.sha==='string') sha=j.data.sha; const body={ message, content, branch }; if(sha) body.sha=sha; return [{ json: { url: `${base}/${path}`, body } }];" }, "id": "st-build-put", "name": "STARTUPS — BUILD_PUT", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -980, -420 ] },
    { "parameters": { "method": "PUT", "url": "={{$json.url}}", "authentication": "predefinedCredentialType", "nodeCredentialType": "githubApi", "sendHeaders": true, "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" }, { "name": "Content-Type", "value": "application/json" } ] }, "sendBody": true, "specifyBody": "json", "jsonBody": "={{ $json.body }}" }, "id": "st-gh-put", "name": "STARTUPS — GITHUB_PUT", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -800, -420 ], "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } } },

    {
      "parameters": {
        "jsCode": "const date = new Date().toISOString().slice(0,10);\nreturn [{ json: { params: { category:'ai-research', timeWindowHours:72, languages:['en','es','pt'], minItems:3, feedMaxLatest:200, repoOwner:'vulcanoai', repoName:'vulcanoai.github.io', branch:'main', pathLatest:'data/ai-research/feed-latest.json', pathSnapshot:`data/ai-research/feed-${date}.json` } } }];"
      },
      "id": "ai-build-params",
      "name": "AI RESEARCH — BUILD_PARAMS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -2140, 160 ]
    },
    { "parameters": { "url": "http://export.arxiv.org/api/query?search_query=cat:cs.AI&sortBy=submittedDate&sortOrder=descending&max_results=50", "responseFormat": "string" }, "id": "ai-http-ai", "name": "AI RESEARCH — HTTP cs.AI", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -2140, -20 ] },
    { "parameters": { "url": "http://export.arxiv.org/api/query?search_query=cat:cs.LG&sortBy=submittedDate&sortOrder=descending&max_results=50", "responseFormat": "string" }, "id": "ai-http-lg", "name": "AI RESEARCH — HTTP cs.LG", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -2140, 80 ] },
    { "parameters": { "url": "http://export.arxiv.org/api/query?search_query=cat:stat.ML&sortBy=submittedDate&sortOrder=descending&max_results=50", "responseFormat": "string" }, "id": "ai-http-ml", "name": "AI RESEARCH — HTTP stat.ML", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -2140, 180 ] },
    {
      "parameters": {
        "jsCode": "const xml=($json.body||$json.data||$json)||'';function clean(s){return String(s||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}function between(s,a,b){const i=s.indexOf(a); if(i<0) return ''; const j=s.indexOf(b,i+a.length); return j<0?'':s.slice(i+a.length,j);}function tagText(block,tag){const open='<'+tag; const close='</'+tag+'>'; const i=block.indexOf(open); if(i<0) return ''; const j=block.indexOf('>', i); if(j<0) return ''; const k=block.indexOf(close, j+1); if(k<0) return ''; return clean(block.slice(j+1, k));}function attr(block,name){const needle=name+'="'; const i=block.indexOf(needle); if(i<0) return ''; const s=block.slice(i+needle.length); const j=s.indexOf('"'); return j<0?'':s.slice(0,j);}const out=[];const parts=xml.split('<entry').slice(1);for(const partRaw of parts){const part = '<entry'+partRaw; const end=part.indexOf('</entry>'); const entry=(end>=0? part.slice(0,end+8): part); const title=tagText(entry,'title'); let url=''; const linkIdx = entry.indexOf('<link'); if(linkIdx>=0){ const linkSeg = entry.slice(linkIdx, Math.min(entry.indexOf('>', linkIdx)+1, linkIdx+300)); const href = attr(linkSeg,'href'); url = href || tagText(entry,'id'); } else { url = tagText(entry,'id'); } const summary=tagText(entry,'summary'); const date=tagText(entry,'updated')||tagText(entry,'published'); const author=tagText(entry,'name'); if(!title||!url) continue; out.push({id:url||title,title,summary,url,source:'arXiv',source_url:'https://arxiv.org',country:'Global',topics:['Investigación','AI'],language:'en',published_at:new Date(date||Date.now()).toISOString(),relevance:6,sentiment:'neutral',author,curator:'Sofía AI'});}return [{ json:{ articles: out } }];"
      },
      "id": "ai-parse-ai",
      "name": "AI RESEARCH — PARSE cs.AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1920, -20 ]
    },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function clean(s){return String(s||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}function between(s,a,b){const i=s.indexOf(a); if(i<0) return ''; const j=s.indexOf(b,i+a.length); return j<0?'':s.slice(i+a.length,j);}function tagText(block,tag){const open='<'+tag; const close='</'+tag+'>'; const i=block.indexOf(open); if(i<0) return ''; const j=block.indexOf('>', i); if(j<0) return ''; const k=block.indexOf(close, j+1); if(k<0) return ''; return clean(block.slice(j+1, k));}function attr(block,name){const needle=name+'="'; const i=block.indexOf(needle); if(i<0) return ''; const s=block.slice(i+needle.length); const j=s.indexOf('"'); return j<0?'':s.slice(0,j);}const out=[];const parts=xml.split('<entry').slice(1);for(const partRaw of parts){const part = '<entry'+partRaw; const end=part.indexOf('</entry>'); const entry=(end>=0? part.slice(0,end+8): part); const title=tagText(entry,'title'); let url=''; const linkIdx = entry.indexOf('<link'); if(linkIdx>=0){ const linkSeg = entry.slice(linkIdx, Math.min(entry.indexOf('>', linkIdx)+1, linkIdx+300)); const href = attr(linkSeg,'href'); url = href || tagText(entry,'id'); } else { url = tagText(entry,'id'); } const summary=tagText(entry,'summary'); const date=tagText(entry,'updated')||tagText(entry,'published'); const author=tagText(entry,'name'); if(!title||!url) continue; out.push({id:url||title,title,summary,url,source:'arXiv',source_url:'https://arxiv.org',country:'Global',topics:['Investigación','AI'],language:'en',published_at:new Date(date||Date.now()).toISOString(),relevance:6,sentiment:'neutral',author,curator:'Sofía AI'});}return [{ json:{ articles: out } }];" }, "id": "ai-parse-lg", "name": "AI RESEARCH — PARSE cs.LG", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1920, 80 ] },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function clean(s){return String(s||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}function between(s,a,b){const i=s.indexOf(a); if(i<0) return ''; const j=s.indexOf(b,i+a.length); return j<0?'':s.slice(i+a.length,j);}function tagText(block,tag){const open='<'+tag; const close='</'+tag+'>'; const i=block.indexOf(open); if(i<0) return ''; const j=block.indexOf('>', i); if(j<0) return ''; const k=block.indexOf(close, j+1); if(k<0) return ''; return clean(block.slice(j+1, k));}function attr(block,name){const needle=name+'="'; const i=block.indexOf(needle); if(i<0) return ''; const s=block.slice(i+needle.length); const j=s.indexOf('"'); return j<0?'':s.slice(0,j);}const out=[];const parts=xml.split('<entry').slice(1);for(const partRaw of parts){const part = '<entry'+partRaw; const end=part.indexOf('</entry>'); const entry=(end>=0? part.slice(0,end+8): part); const title=tagText(entry,'title'); let url=''; const linkIdx = entry.indexOf('<link'); if(linkIdx>=0){ const linkSeg = entry.slice(linkIdx, Math.min(entry.indexOf('>', linkIdx)+1, linkIdx+300)); const href = attr(linkSeg,'href'); url = href || tagText(entry,'id'); } else { url = tagText(entry,'id'); } const summary=tagText(entry,'summary'); const date=tagText(entry,'updated')||tagText(entry,'published'); const author=tagText(entry,'name'); if(!title||!url) continue; out.push({id:url||title,title,summary,url,source:'arXiv',source_url:'https://arxiv.org',country:'Global',topics:['Investigación','AI'],language:'en',published_at:new Date(date||Date.now()).toISOString(),relevance:6,sentiment:'neutral',author,curator:'Sofía AI'});}return [{ json:{ articles: out } }];" }, "id": "ai-parse-ml", "name": "AI RESEARCH — PARSE stat.ML", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1920, 180 ] },
    {
      "parameters": {
        "jsCode": "function p(){ try{ return $items('AI RESEARCH — BUILD_PARAMS',0,0).json.params; }catch{ return {}; } }\nconst params=p(); const hours=Number(params.timeWindowHours||72); const now=Date.now();\nconst arr=[]; for(const it of $input.all()){ const a=Array.isArray(it.json.articles)? it.json.articles: []; for(const x of a){ if(x && x.url) arr.push(x); } }\nconst seen=new Set(); const out=[]; for(const a of arr){ const k=a.url; if(!k||seen.has(k)) continue; seen.add(k); out.push(a); }\nconst filtered=out.filter(a=>{ const t=new Date(a.published_at).getTime(); return isFinite(t) && (now-t)<=hours*3600*1000; });\nfiltered.sort((a,b)=> new Date(b.published_at)-new Date(a.published_at));\nreturn [{ json: { category:'ai-research', articles: filtered } }];"
      },
      "id": "ai-aggregate",
      "name": "AI RESEARCH — AGGREGATE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1700, 80 ]
    },
    {
      "parameters": {
        "jsCode": "function item(n){ try{ const it=$items(n,0,0); return it && it.json ? it.json : null; }catch(_){ return null; } }\nconst params = (item('AI RESEARCH — BUILD_PARAMS')?.params) || {};\nconst owner = params.repoOwner || 'vulcanoai';\nconst repo  = params.repoName  || 'vulcanoai.github.io';\nconst branch= params.branch     || 'main';\nconst base  = `https://api.github.com/repos/${owner}/${repo}/contents`;\nconst latestPath = params.pathLatest || 'data/ai-research/feed-latest.json';\nconst snapshotPath = params.pathSnapshot || ('data/ai-research/feed-'+new Date().toISOString().slice(0,10)+'.json');\nconst input = item('AI RESEARCH — AGGREGATE') || $json || {};\nconst articles = Array.isArray(input.articles) ? input.articles : [];\nconst latestPayload = JSON.stringify({ version:'v1.0', category:'ai-research', generated_at: new Date().toISOString(), articles }, null, 2);\nconst latestContent = Buffer.from(latestPayload).toString('base64');\nreturn [ { json: { target:'latest', base, branch, path: latestPath, content: latestContent, message: 'chore(ai-research): update feed-latest.json' } }, { json: { target:'snapshot', base, branch, path: snapshotPath, content: latestContent, message: 'chore(ai-research): snapshot for day' } } ];"
      },
      "id": "ai-build-gh",
      "name": "AI RESEARCH — BUILD_GH_BODY",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1500, 80 ]
    },
    { "parameters": { "url": "={{$json.base}}/{{ $json.path }}?ref={{$json.branch}}", "authentication": "predefinedCredentialType", "nodeCredentialType": "githubApi", "sendHeaders": true, "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" } ] } }, "id": "ai-gh-get", "name": "AI RESEARCH — GITHUB_GET_SHA", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -1320, 0 ], "alwaysOutputData": true, "continueOnFail": true, "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } } },
    { "parameters": { "mode": "mergeByPosition", "options": {} }, "id": "ai-merge-sha", "name": "AI RESEARCH — MERGE_SHA", "type": "n8n-nodes-base.merge", "typeVersion": 2, "position": [ -1160, 40 ] },
    { "parameters": { "jsCode": "const j=$json||{}; const base=j.base||''; const path=j.path||''; const branch=j.branch||'main'; const message=j.message||'chore(ai-research): update'; const content=j.content; let sha; if(j && j.body && typeof j.body.sha==='string') sha=j.body.sha; if(!sha && j && j.data && typeof j.data.sha==='string') sha=j.data.sha; const body={ message, content, branch }; if(sha) body.sha=sha; return [{ json: { url: `${base}/${path}`, body } }];" }, "id": "ai-build-put", "name": "AI RESEARCH — BUILD_PUT", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -980, 80 ] },
    { "parameters": { "method": "PUT", "url": "={{$json.url}}", "authentication": "predefinedCredentialType", "nodeCredentialType": "githubApi", "sendHeaders": true, "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" }, { "name": "Content-Type", "value": "application/json" } ] }, "sendBody": true, "specifyBody": "json", "jsonBody": "={{ $json.body }}" }, "id": "ai-gh-put", "name": "AI RESEARCH — GITHUB_PUT", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -800, 80 ], "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } } },

    {
      "parameters": {
        "httpMethod": "POST",
        "path": "global-ai-discovery",
        "responseMode": "responseNode",
        "options": { "rawBody": true }
      },
      "id": "gd-webhook",
      "name": "GLOBAL — DISCOVERY_IN",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [ -2380, 860 ]
    },
    { "parameters": {}, "id": "gd-start", "name": "GLOBAL — START", "type": "n8n-nodes-base.merge", "typeVersion": 2, "position": [ -2200, 760 ] },
    {
      "parameters": {
        "jsCode": "let body=$json.body; if(typeof body==='string'){ try{ body=JSON.parse(body);}catch{ body={}; } } const now=new Date(); const date=now.toISOString().slice(0,10); const params={ category:'global-ai', timeWindowHours:Number(body?.time_window_hours ?? 48), minItems:Number(body?.min_items ?? 6), languages:Array.isArray(body?.languages)? body.languages : ['es','pt','en','zh','ru'], branch: body?.branch || 'main', repoOwner: body?.repo_owner || 'vulcanoai', repoName: body?.repo_name || 'vulcanoai.github.io', pathLatest: body?.path_latest || 'data/discovery/feed-latest.json', pathSnapshot: body?.path_snapshot || `data/discovery/feed-${date}.json`, topic: (body?.topic || '').toString().trim() || 'AI developments, companies, policy, research with links to Latin America' }; return [{ json: { params } }];"
      },
      "id": "gd-build-params",
      "name": "GLOBAL — BUILD_PARAMS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -2020, 760 ]
    },
    {
      "parameters": {
        "jsCode": "function p(){ try{ return $items('GLOBAL — BUILD_PARAMS',0,0).json.params; }catch{ return $json.params||{} } } const params=p(); const hours=params.timeWindowHours||48; const langs=Array.isArray(params.languages)? params.languages : ['es','pt','en','zh','ru']; const latam=['Latin America','LATAM','América Latina','América do Sul','South America','Centroamérica']; const aiTerms={ es:['inteligencia artificial','IA','modelo','red neuronal'], pt:['inteligência artificial','IA','modelo','rede neural'], en:['artificial intelligence','AI','model','neural network'], zh:['人工智能','AI','模型'], ru:['искусственный интеллект','AI','модель'] }; const localeHL={ es:'es', pt:'pt-BR', en:'en', zh:'zh-CN', ru:'ru' }; const qdr = hours>=24? `qdr:d${Math.ceil(hours/24)}` : `qdr:h${hours}`; const out=[]; for(const lg of langs){ const terms=aiTerms[lg]||aiTerms.en; const baseTerms = terms.join(' OR '); const lat = latam.join(' OR '); out.push({ json: { lang: lg, hl: localeHL[lg]||'en', body: { q: `${baseTerms} (${lat})`, num: 10, tbs: qdr } } }); } return out;"
      },
      "id": "gd-build-queries",
      "name": "GLOBAL — BUILD_QUERIES",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1840, 760 ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://google.serper.dev/news",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "X-API-KEY", "value": "={{$env.SERPER_API_KEY}}" }, { "name": "Content-Type", "value": "application/json" } ] },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.body}}",
        "options": { "timeout": 30000 }
      },
      "id": "gd-serper",
      "name": "GLOBAL — SERPER News",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -1660, 760 ],
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const lang=$json.lang || 'en'; let data=$json; if($json.body && typeof $json.body==='object') data=$json.body; if($json.data && typeof $json.data==='object') data=$json.data; const news = Array.isArray(data.news)? data.news : []; const out=[]; for(const n of news){ if(!n || !n.link || !n.title) continue; out.push({ json: { lang, url: n.link, title: n.title, snippet: n.snippet||'', source: n.source||'', date: n.date||n.datePublished||'' } }); } return out;"
      },
      "id": "gd-parse-serper",
      "name": "GLOBAL — PARSE_SERPER",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1480, 760 ]
    },
    { "parameters": { "method": "GET", "url": "={{$json.url}}", "responseFormat": "string", "options": { "timeout": 15000, "maxRedirects": 5 } }, "id": "gd-http-validate", "name": "GLOBAL — HTTP_VALIDATE", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -1300, 760 ], "alwaysOutputData": true, "continueOnFail": true },
    {
      "parameters": {
        "jsCode": "const html = ($json.body && typeof $json.body==='string')? $json.body : ($json.data || ''); const url=$json.url||''; function lower(s){return String(s||'').toLowerCase();} function findMeta(prop){ const p=lower(prop); const idx = lower(html).indexOf('property="'+p+'"'); if(idx<0) return ''; const seg = html.slice(idx, idx+300); const ci = seg.toLowerCase().indexOf('content="'); if(ci<0) return ''; const rest = seg.slice(ci+9); const end = rest.indexOf('"'); return end<0? '': rest.slice(0,end); } function findTitle(){ const m = html.match(/<title>([^<]+)<\\/title>/i); return m? m[1].trim(): ''; } const title = findMeta('og:title') || findTitle(); const description = findMeta('og:description') || ''; const site = findMeta('og:site_name') || ''; const pub = findMeta('article:published_time') || ''; return [{ json: { url, title, description, site, published_at: pub, html_excerpt: (html.slice(0,2000)||''), langHint: $json.lang||'' } }];"
      },
      "id": "gd-extract-meta",
      "name": "GLOBAL — EXTRACT_META",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1120, 760 ]
    },
    {
      "parameters": {
        "jsCode": "function p(){ try{ return $items('GLOBAL — BUILD_PARAMS',0,0).json.params; }catch{ return {}; } } const params=p(); const terms=(params.latamTerms||['Latin America','LATAM','América Latina','América do Sul','South America','Centroamérica']).map(s=>s.toLowerCase()); const url=$json.url||''; const title=String($json.title||'').toLowerCase(); const desc=String($json.description||'').toLowerCase(); const site=String($json.site||'').toLowerCase(); const tlds=['.mx','.br','.ar','.cl','.co','.pe','.uy','.ec','.pa','.ve','.bo','.py','.do','.cr','.gt','.hn','.sv','.ni']; let score=0; for(const t of terms){ if(title.includes(t)) score+=2; if(desc.includes(t)) score+=1; if(site.includes(t)) score+=1; } if(tlds.some(t=>url.includes(t))) score+=2; if(/lat(am|\s*america)/i.test(title)) score+=2; if(/\b(ibero|hispano)\b/i.test(title)) score+=1; if(score>=2){ return [{ json: { ...$json, _latamScore: score } }]; } else { return []; }"
      },
      "id": "gd-filter-latam",
      "name": "GLOBAL — FILTER_LATAM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -940, 760 ]
    },
    {
      "parameters": {
        "jsCode": "function norm(j){ return { id: j.url, title: j.title||'', summary: j.description||j.html_excerpt||'', url: j.url, source: j.site||'', source_url: j.url? new URL(j.url).origin : '', country: 'Regional', topics: ['AI'], language: (j.langHint||'').slice(0,2)||'en', published_at: j.published_at || new Date().toISOString(), relevance: 6, sentiment: 'neutral', author: '', curator: 'Luciano AI' }; } return [{ json: { articles: [ norm($json) ] } }];"
      },
      "id": "gd-curate",
      "name": "GLOBAL — CURATE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -760, 760 ]
    },
    {
      "parameters": {
        "jsCode": "const all=$input.all(); const arr=[]; for(const it of all){ const a=Array.isArray(it.json.articles)? it.json.articles: []; for(const x of a){ if(x && x.url) arr.push(x); } } const seen=new Set(); const out=[]; for(const a of arr){ if(!seen.has(a.url)){ seen.add(a.url); out.push(a); } } function p(){ try{ return $items('GLOBAL — BUILD_PARAMS',0,0).json.params; }catch{ return {}; } } const params=p(); const now=Date.now(); const hours=params.timeWindowHours||48; const filtered = out.filter(a=>{ const t=new Date(a.published_at).getTime(); return isFinite(t) && (now-t) <= hours*3600*1000; }); filtered.sort((a,b)=> new Date(b.published_at)-new Date(a.published_at)); return [{ json: { category: 'global-ai', articles: filtered } }];"
      },
      "id": "gd-merge-items",
      "name": "GLOBAL — MERGE_ITEMS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -580, 760 ]
    },
    {
      "parameters": {
        "jsCode": "function p(){ try{ return $items('GLOBAL — BUILD_PARAMS',0,0).json.params; }catch{ return {}; } } const params=p(); const owner=params.repoOwner; const repo=params.repoName; const branch=params.branch; const base=`https://api.github.com/repos/${owner}/${repo}/contents`; const latestPath=params.pathLatest; const snapshotPath=params.pathSnapshot; const payload = { version:'v1.0', category:'global-ai', generated_at: new Date().toISOString(), articles: ($json.articles||[]) }; const content = Buffer.from(JSON.stringify(payload, null, 2)).toString('base64'); return [ { json: { base, branch, path: latestPath, content, message: 'chore(global-ai): update feed-latest.json' } }, { json: { base, branch, path: snapshotPath, content, message: 'chore(global-ai): snapshot for day' } } ];"
      },
      "id": "gd-build-gh",
      "name": "GLOBAL — BUILD_GH_BODY",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -400, 760 ]
    },
    { "parameters": { "url": "={{$json.base}}/{{ $json.path }}?ref={{$json.branch}}", "authentication": "predefinedCredentialType", "nodeCredentialType": "githubApi", "sendHeaders": true, "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" } ] }, "options": { "timeout": 60000 } }, "id": "gd-gh-get", "name": "GLOBAL — GITHUB_GET_SHA", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -220, 680 ], "alwaysOutputData": true, "continueOnFail": true, "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } } },
    { "parameters": { "mode": "mergeByPosition", "options": {} }, "id": "gd-merge-sha", "name": "GLOBAL — MERGE_SHA", "type": "n8n-nodes-base.merge", "typeVersion": 2, "position": [ -60, 720 ] },
    { "parameters": { "jsCode": "const j=$json||{}; const base=j.base||''; const path=j.path||''; const branch=j.branch||'main'; const message=j.message||'chore(global-ai): update'; const content=j.content; let sha; if(j && j.body && typeof j.body.sha==='string') sha=j.body.sha; if(!sha && j && j.data && typeof j.data.sha==='string') sha=j.data.sha; const body={ message, content, branch }; if(sha) body.sha=sha; return [{ json: { url: `${base}/${path}`, body } }];" }, "id": "gd-build-put", "name": "GLOBAL — BUILD_PUT", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ 120, 760 ] },
    { "parameters": { "method": "PUT", "url": "={{$json.url}}", "authentication": "predefinedCredentialType", "nodeCredentialType": "githubApi", "sendHeaders": true, "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" }, { "name": "Content-Type", "value": "application/json" } ] }, "sendBody": true, "specifyBody": "json", "jsonBody": "={{ $json.body }}", "options": { "timeout": 60000 } }, "id": "gd-gh-put", "name": "GLOBAL — GITHUB_PUT", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ 300, 760 ], "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } } },
    { "parameters": { "options": { "responseCode": 200 } }, "id": "gd-respond", "name": "GLOBAL — RESPOND", "type": "n8n-nodes-base.respondToWebhook", "typeVersion": 1, "position": [ 480, 760 ] }
  ],
  "connections": {
    "STARTUPS — AUTOPILOT (hourly)": { "main": [ [ { "node": "STARTUPS — BUILD_PARAMS", "type": "main", "index": 0 }, { "node": "STARTUPS — HTTP Contxto", "type": "main", "index": 0 }, { "node": "STARTUPS — HTTP Startupi", "type": "main", "index": 0 }, { "node": "STARTUPS — HTTP StartupsBR", "type": "main", "index": 0 } ] ] },
    "STARTUPS — HTTP Contxto": { "main": [ [ { "node": "STARTUPS — PARSE Contxto", "type": "main", "index": 0 } ] ] },
    "STARTUPS — HTTP Startupi": { "main": [ [ { "node": "STARTUPS — PARSE Startupi", "type": "main", "index": 0 } ] ] },
    "STARTUPS — HTTP StartupsBR": { "main": [ [ { "node": "STARTUPS — PARSE StartupsBR", "type": "main", "index": 0 } ] ] },
    "STARTUPS — PARSE Contxto": { "main": [ [ { "node": "STARTUPS — AGGREGATE", "type": "main", "index": 0 } ] ] },
    "STARTUPS — PARSE Startupi": { "main": [ [ { "node": "STARTUPS — AGGREGATE", "type": "main", "index": 0 } ] ] },
    "STARTUPS — PARSE StartupsBR": { "main": [ [ { "node": "STARTUPS — AGGREGATE", "type": "main", "index": 0 } ] ] },
    "STARTUPS — AGGREGATE": { "main": [ [ { "node": "STARTUPS — BUILD_GH_BODY", "type": "main", "index": 0 } ] ] },
    "STARTUPS — BUILD_GH_BODY": { "main": [ [ { "node": "STARTUPS — GITHUB_GET_SHA", "type": "main", "index": 0 }, { "node": "STARTUPS — MERGE_SHA", "type": "main", "index": 0 } ] ] },
    "STARTUPS — GITHUB_GET_SHA": { "main": [ [ { "node": "STARTUPS — MERGE_SHA", "type": "main", "index": 1 } ] ] },
    "STARTUPS — MERGE_SHA": { "main": [ [ { "node": "STARTUPS — BUILD_PUT", "type": "main", "index": 0 } ] ] },

    "AI RESEARCH — AUTOPILOT (hourly)": { "main": [ [ { "node": "AI RESEARCH — BUILD_PARAMS", "type": "main", "index": 0 }, { "node": "AI RESEARCH — HTTP cs.AI", "type": "main", "index": 0 }, { "node": "AI RESEARCH — HTTP cs.LG", "type": "main", "index": 0 }, { "node": "AI RESEARCH — HTTP stat.ML", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — HTTP cs.AI": { "main": [ [ { "node": "AI RESEARCH — PARSE cs.AI", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — HTTP cs.LG": { "main": [ [ { "node": "AI RESEARCH — PARSE cs.LG", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — HTTP stat.ML": { "main": [ [ { "node": "AI RESEARCH — PARSE stat.ML", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — PARSE cs.AI": { "main": [ [ { "node": "AI RESEARCH — AGGREGATE", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — PARSE cs.LG": { "main": [ [ { "node": "AI RESEARCH — AGGREGATE", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — PARSE stat.ML": { "main": [ [ { "node": "AI RESEARCH — AGGREGATE", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — AGGREGATE": { "main": [ [ { "node": "AI RESEARCH — BUILD_GH_BODY", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — BUILD_GH_BODY": { "main": [ [ { "node": "AI RESEARCH — GITHUB_GET_SHA", "type": "main", "index": 0 }, { "node": "AI RESEARCH — MERGE_SHA", "type": "main", "index": 0 } ] ] },
    "AI RESEARCH — GITHUB_GET_SHA": { "main": [ [ { "node": "AI RESEARCH — MERGE_SHA", "type": "main", "index": 1 } ] ] },
    "AI RESEARCH — MERGE_SHA": { "main": [ [ { "node": "AI RESEARCH — BUILD_PUT", "type": "main", "index": 0 } ] ] },

    "GLOBAL DISCOVERY — AUTOPILOT (hourly)": { "main": [ [ { "node": "GLOBAL — START", "type": "main", "index": 0 } ] ] },
    "GLOBAL — DISCOVERY_IN": { "main": [ [ { "node": "GLOBAL — START", "type": "main", "index": 0 } ] ] },
    "GLOBAL — START": { "main": [ [ { "node": "GLOBAL — BUILD_PARAMS", "type": "main", "index": 0 } ] ] },
    "GLOBAL — BUILD_PARAMS": { "main": [ [ { "node": "GLOBAL — BUILD_QUERIES", "type": "main", "index": 0 } ] ] },
    "GLOBAL — BUILD_QUERIES": { "main": [ [ { "node": "GLOBAL — SERPER News", "type": "main", "index": 0 } ] ] },
    "GLOBAL — SERPER News": { "main": [ [ { "node": "GLOBAL — PARSE_SERPER", "type": "main", "index": 0 } ] ] },
    "GLOBAL — PARSE_SERPER": { "main": [ [ { "node": "GLOBAL — HTTP_VALIDATE", "type": "main", "index": 0 } ] ] },
    "GLOBAL — HTTP_VALIDATE": { "main": [ [ { "node": "GLOBAL — EXTRACT_META", "type": "main", "index": 0 } ] ] },
    "GLOBAL — EXTRACT_META": { "main": [ [ { "node": "GLOBAL — FILTER_LATAM", "type": "main", "index": 0 } ] ] },
    "GLOBAL — FILTER_LATAM": { "main": [ [ { "node": "GLOBAL — CURATE", "type": "main", "index": 0 } ] ] },
    "GLOBAL — CURATE": { "main": [ [ { "node": "GLOBAL — MERGE_ITEMS", "type": "main", "index": 0 } ] ] },
    "GLOBAL — MERGE_ITEMS": { "main": [ [ { "node": "GLOBAL — BUILD_GH_BODY", "type": "main", "index": 0 } ] ] },
    "GLOBAL — BUILD_GH_BODY": { "main": [ [ { "node": "GLOBAL — GITHUB_GET_SHA", "type": "main", "index": 0 }, { "node": "GLOBAL — MERGE_SHA", "type": "main", "index": 0 } ] ] },
    "GLOBAL — GITHUB_GET_SHA": { "main": [ [ { "node": "GLOBAL — MERGE_SHA", "type": "main", "index": 1 } ] ] },
    "GLOBAL — MERGE_SHA": { "main": [ [ { "node": "GLOBAL — BUILD_PUT", "type": "main", "index": 0 } ] ] },
    "GLOBAL — BUILD_PUT": { "main": [ [ { "node": "GLOBAL — GITHUB_PUT", "type": "main", "index": 0 } ] ] },
    "GLOBAL — GITHUB_PUT": { "main": [ [ { "node": "GLOBAL — RESPOND", "type": "main", "index": 0 } ] ] }
  },
  "active": false,
  "settings": { "executionOrder": "v1", "callerPolicy": "workflowsFromSameOwner" },
  "versionId": "v1-ai-latam-combined-fixed",
  "id": "wk-ai-latam-autopilot-combined-fixed",
  "tags": ["combined","autopilot","ai","startups","research","global"]
}

