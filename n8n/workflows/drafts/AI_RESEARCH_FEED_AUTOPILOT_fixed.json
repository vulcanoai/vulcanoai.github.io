{
  "name": "AI RESEARCH — Feed Autopilot (fixed)",
  "nodes": [
    {
      "parameters": { "rule": { "interval": [ { "field": "hours" } ] } },
      "id": "trg-aires-hourly",
      "name": "AUTOPILOT (hourly)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [ -1920, 160 ],
      "notes": "Runs hourly to fetch latest AI papers from arXiv (Atom)."
    },
    {
      "parameters": {
        "jsCode": "const date = new Date().toISOString().slice(0,10);\nreturn [{ json: { params: { category:'ai-research', timeWindowHours:72, languages:['en','es','pt'], minItems:3, feedMaxLatest:200, repoOwner:'vulcanoai', repoName:'vulcanoai.github.io', branch:'main', pathLatest:'data/ai-research/feed-latest.json', pathSnapshot:`data/ai-research/feed-${date}.json` } } }];"
      },
      "id": "build-params-aires",
      "name": "BUILD_PARAMS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1680, 160 ]
    },
    { "parameters": { "url": "http://export.arxiv.org/api/query?search_query=cat:cs.AI&sortBy=submittedDate&sortOrder=descending&max_results=50", "responseFormat": "string" }, "id": "http-arxiv-ai", "name": "HTTP — arXiv cs.AI", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -1680, -96 ] },
    { "parameters": { "url": "http://export.arxiv.org/api/query?search_query=cat:cs.LG&sortBy=submittedDate&sortOrder=descending&max_results=50", "responseFormat": "string" }, "id": "http-arxiv-lg", "name": "HTTP — arXiv cs.LG", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -1680, 16 ] },
    { "parameters": { "url": "http://export.arxiv.org/api/query?search_query=cat:stat.ML&sortBy=submittedDate&sortOrder=descending&max_results=50", "responseFormat": "string" }, "id": "http-arxiv-ml", "name": "HTTP — arXiv stat.ML", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [ -1680, 128 ] },
    {
      "parameters": {
        "jsCode": "const xml=($json.body||$json.data||$json)||'';function tx(v){return String(v||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}function extr(tag,str){const m=str.match(new RegExp(`<${tag}[^>]*>([\\s\\S]*?)<\\/${tag}>`,'i'));return m?tx(m[1]):'';}function linkOf(str){const m=str.match(/<link[^>]+href=\"([^\"]+)\"[^>]*?(?:rel=\"alternate\")?[^>]*?\/>/i);return m?m[1]:extr('id',str);}const out=[];const re=/<entry[\\s\\S]*?<\\/entry>/gi;let m;while((m=re.exec(xml))){const it=m[0];const title=extr('title',it);const url=linkOf(it);const summary=extr('summary',it);const date=extr('updated',it)||extr('published',it);const author=extr('name',it);if(!title||!url) continue;out.push({id:url||title,title,summary,url,source:'arXiv',source_url:'https://arxiv.org',country:'Global',topics:['Investigación','AI'],language:'en',published_at:new Date(date||Date.now()).toISOString(),relevance:6,sentiment:'neutral',author,curator:'Sofía AI'});}return [{ json:{ articles: out } }];"
      },
      "id": "parse-arxiv-ai",
      "name": "PARSE — arXiv cs.AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1456, -96 ]
    },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function tx(v){return String(v||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}function extr(tag,str){const m=str.match(new RegExp(`<${tag}[^>]*>([\\s\\S]*?)<\\/${tag}>`,'i'));return m?tx(m[1]):'';}function linkOf(str){const m=str.match(/<link[^>]+href=\"([^\"]+)\"[^>]*?(?:rel=\"alternate\")?[^>]*?\/>/i);return m?m[1]:extr('id',str);}const out=[];const re=/<entry[\\s\\S]*?<\\/entry>/gi;let m;while((m=re.exec(xml))){const it=m[0];const title=extr('title',it);const url=linkOf(it);const summary=extr('summary',it);const date=extr('updated',it)||extr('published',it);const author=extr('name',it);if(!title||!url) continue;out.push({id:url||title,title,summary,url,source:'arXiv',source_url:'https://arxiv.org',country:'Global',topics:['Investigación','AI'],language:'en',published_at:new Date(date||Date.now()).toISOString(),relevance:6,sentiment:'neutral',author,curator:'Sofía AI'});}return [{ json:{ articles: out } }];" }, "id": "parse-arxiv-lg", "name": "PARSE — arXiv cs.LG", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1456, 16 ] },
    { "parameters": { "jsCode": "const xml=($json.body||$json.data||$json)||'';function tx(v){return String(v||'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim();}function extr(tag,str){const m=str.match(new RegExp(`<${tag}[^>]*>([\\s\\S]*?)<\\/${tag}>`,'i'));return m?tx(m[1]):'';}function linkOf(str){const m=str.match(/<link[^>]+href=\"([^\"]+)\"[^>]*?(?:rel=\"alternate\")?[^>]*?\/>/i);return m?m[1]:extr('id',str);}const out=[];const re=/<entry[\\s\\S]*?<\\/entry>/gi;let m;while((m=re.exec(xml))){const it=m[0];const title=extr('title',it);const url=linkOf(it);const summary=extr('summary',it);const date=extr('updated',it)||extr('published',it);const author=extr('name',it);if(!title||!url) continue;out.push({id:url||title,title,summary,url,source:'arXiv',source_url:'https://arxiv.org',country:'Global',topics:['Investigación','AI'],language:'en',published_at:new Date(date||Date.now()).toISOString(),relevance:6,sentiment:'neutral',author,curator:'Sofía AI'});}return [{ json:{ articles: out } }];" }, "id": "parse-arxiv-ml", "name": "PARSE — arXiv stat.ML", "type": "n8n-nodes-base.code", "typeVersion": 2, "position": [ -1456, 128 ] },
    {
      "parameters": {
        "jsCode": "function p(){ try{ return $items('BUILD_PARAMS',0,0).json.params; }catch{ return {}; } }\nconst params=p(); const hours=Number(params.timeWindowHours||72); const now=Date.now();\nconst arr=[]; for(const it of $input.all()){ const a=Array.isArray(it.json.articles)? it.json.articles: []; for(const x of a){ if(x && x.url) arr.push(x); } }\nconst seen=new Set(); const out=[]; for(const a of arr){ const k=a.url; if(!k||seen.has(k)) continue; seen.add(k); out.push(a); }\nconst filtered=out.filter(a=>{ const t=new Date(a.published_at).getTime(); return isFinite(t) && (now-t)<=hours*3600*1000; });\nfiltered.sort((a,b)=> new Date(b.published_at)-new Date(a.published_at));\nreturn [{ json: { category:'ai-research', articles: filtered } }];"
      },
      "id": "aggregate-aires",
      "name": "AGGREGATE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -1184, 16 ]
    },
    {
      "parameters": {
        "jsCode": "function item(n){ try{ const it=$items(n,0,0); return it && it.json ? it.json : null; }catch(_){ return null; } }\nconst params = (item('BUILD_PARAMS')?.params) || {};\nconst owner = params.repoOwner || 'vulcanoai';\nconst repo  = params.repoName  || 'vulcanoai.github.io';\nconst branch= params.branch     || 'main';\nconst base  = `https://api.github.com/repos/${owner}/${repo}/contents`;\nconst latestPath = params.pathLatest || 'data/ai-research/feed-latest.json';\nconst snapshotPath = params.pathSnapshot || ('data/ai-research/feed-'+new Date().toISOString().slice(0,10)+'.json');\nconst input = item('AGGREGATE') || $json || {};\nconst articles = Array.isArray(input.articles) ? input.articles : [];\nconst latestPayload = JSON.stringify({ version:'v1.0', category:'ai-research', generated_at: new Date().toISOString(), articles }, null, 2);\nconst latestContent = Buffer.from(latestPayload).toString('base64');\nreturn [ { json: { target:'latest', base, branch, path: latestPath, content: latestContent, message: 'chore(ai-research): update feed-latest.json' } }, { json: { target:'snapshot', base, branch, path: snapshotPath, content: latestContent, message: 'chore(ai-research): snapshot for day' } } ];"
      },
      "id": "build-gh-body-aires",
      "name": "BUILD_GH_BODY",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -944, 16 ]
    },
    {
      "parameters": {
        "url": "={{$json.base}}/{{ $json.path }}?ref={{$json.branch}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" } ] }
      },
      "id": "gh-get-aires-sha",
      "name": "GITHUB_GET_SHA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -768, -80 ],
      "alwaysOutputData": true,
      "continueOnFail": true,
      "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } }
    },
    { "parameters": { "mode": "mergeByPosition", "options": {} }, "id": "merge-sha-aires", "name": "MERGE_SHA", "type": "n8n-nodes-base.merge", "typeVersion": 2, "position": [ -560, -32 ] },
    {
      "parameters": {
        "jsCode": "const j=$json||{}; const base=j.base||''; const path=j.path||''; const branch=j.branch||'main'; const message=j.message||'chore(ai-research): update'; const content=j.content; let sha; if(j && j.body && typeof j.body.sha==='string') sha=j.body.sha; if(!sha && j && j.data && typeof j.data.sha==='string') sha=j.data.sha; const body={ message, content, branch }; if(sha) body.sha=sha; return [{ json: { url: `${base}/${path}`, body } }];"
      },
      "id": "build-put-aires",
      "name": "BUILD_PUT",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [ -368, 16 ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{$json.url}}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendHeaders": true,
        "headerParameters": { "parameters": [ { "name": "Accept", "value": "application/vnd.github+json" }, { "name": "Content-Type", "value": "application/json" } ] },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}"
      },
      "id": "gh-put-aires",
      "name": "GITHUB_PUT",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -176, 16 ],
      "credentials": { "githubApi": { "id": "fiWvt8LJXl85zjSx", "name": "GitHub account" } }
    }
  ],
  "connections": {
    "AUTOPILOT (hourly)": { "main": [ [ { "node": "BUILD_PARAMS", "type": "main", "index": 0 }, { "node": "HTTP — arXiv cs.AI", "type": "main", "index": 0 }, { "node": "HTTP — arXiv cs.LG", "type": "main", "index": 0 }, { "node": "HTTP — arXiv stat.ML", "type": "main", "index": 0 } ] ] },
    "HTTP — arXiv cs.AI": { "main": [ [ { "node": "PARSE — arXiv cs.AI", "type": "main", "index": 0 } ] ] },
    "HTTP — arXiv cs.LG": { "main": [ [ { "node": "PARSE — arXiv cs.LG", "type": "main", "index": 0 } ] ] },
    "HTTP — arXiv stat.ML": { "main": [ [ { "node": "PARSE — arXiv stat.ML", "type": "main", "index": 0 } ] ] },
    "PARSE — arXiv cs.AI": { "main": [ [ { "node": "AGGREGATE", "type": "main", "index": 0 } ] ] },
    "PARSE — arXiv cs.LG": { "main": [ [ { "node": "AGGREGATE", "type": "main", "index": 0 } ] ] },
    "PARSE — arXiv stat.ML": { "main": [ [ { "node": "AGGREGATE", "type": "main", "index": 0 } ] ] },
    "AGGREGATE": { "main": [ [ { "node": "BUILD_GH_BODY", "type": "main", "index": 0 } ] ] },
    "BUILD_GH_BODY": { "main": [ [ { "node": "GITHUB_GET_SHA", "type": "main", "index": 0 }, { "node": "MERGE_SHA", "type": "main", "index": 0 } ] ] },
    "GITHUB_GET_SHA": { "main": [ [ { "node": "MERGE_SHA", "type": "main", "index": 1 } ] ] },
    "MERGE_SHA": { "main": [ [ { "node": "BUILD_PUT", "type": "main", "index": 0 } ] ] }
  },
  "active": false,
  "settings": { "executionOrder": "v1", "callerPolicy": "workflowsFromSameOwner" },
  "versionId": "v1-aires-fixed-2",
  "id": "wk-aires-autopilot-fixed",
  "tags": ["ai","research","arxiv","autopilot"]
}

